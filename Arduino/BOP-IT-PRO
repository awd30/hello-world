
//LCD config
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
//#include <pitches.h>
#include <SimpleSDAudio.h>
#include <Talkie.h>
#include "Vocab_US_Large.h"
#include "Vocab_Special.h"
LiquidCrystal_I2C lcd(0x27,16,2); 

//Buttons define
const int btnBlue=2; //Blue
const int btnRed=3; //Red
const int btnYellow=4; //Yellow
const int btnGreen=5; //Green

int blueState = 0;
int redState = 0;
int yellowState = 0;
int greenState = 0;

//Speaker
// Text-to-speech
Talkie voz;
const uint8_t spTO[] PROGMEM = {0x09,0xD8,0x4E,0x34,0x00,0x4B,0xA7,0xA5,0xBC,0xE9,0x62,0x55,0x4B,0x53,0x9A,0xAC,0x5C,0x2D,0xF9,0x4B,0xE9,0x32,0x73,0xD3,0xA1,0x3D,0xA5,0x4F,0x52,0x2D,0x9B,0xB6,0xA4,0x21,0x79,0x95,0xC0,0xAC,0xAD,0x16,0xED,0xDC,0x22,0x23,0xC2,0xFF,0x03};
const uint8_t spYELLOW[] PROGMEM = {0xAE,0xDB,0x09,0x44,0xBC,0x2F,0xC5,0x2E,0x75,0xD3,0x83,0x8A,0xCF,0xA5,0xD2,0x0C,0x2D,0x4A,0xBE,0x8F,0x4F,0x55,0xAD,0x2B,0x47,0xAF,0x39,0x45,0xF4,0x16,0x1E,0xB9,0xF8,0x14,0xC1,0x7B,0xBB,0x79,0xEB,0x51,0x78,0xE7,0x93,0x1C,0x4D,0x4A,0x15,0xAC,0x6F,0x09,0xB7,0xEB,0xCD,0x6E,0x5A,0xA7,0x72,0xBE,0xAA,0xB4,0xA9,0x7D,0xE8,0x65,0x9E,0x63,0x93,0x36,0x66,0xE0,0xA3,0x4B,0x8C,0x5B,0xA9,0x81,0x97,0x2D,0x31,0xD5,0xA4,0x06,0x1B,0x24,0xC7,0x9C,0xB6,0xE8,0x7D,0x14,0x76,0xF6,0x34,0x0F,0x00,0x00};
const uint8_t spRED[] PROGMEM = {0xA6,0xE5,0x4D,0xDD,0x33,0xE4,0x87,0xC6,0x0C,0x0C,0x4B,0xD3,0x3E,0x2A,0x3F,0x39,0xC5,0x2D,0xEF,0xA9,0x52,0x77,0x17,0xED,0x36,0x37,0xBF,0xF9,0x29,0x52,0xF7,0x10,0xA9,0xD6,0xB7,0xDA,0xF5,0x6E,0x67,0xE7,0x06,0xEB,0x55,0xC5,0xBC,0x91,0x1D,0xEC,0x40,0x02,0xA2,0x32,0xD3,0xD2,0x56,0x18,0x4A,0x6C,0x13,0x51,0xC7,0x0F,0x00,0x00};
const uint8_t spPRESS[] PROGMEM = {0x04,0xC0,0x36,0x4C,0x01,0x2E,0xA9,0x2B,0xC0,0x36,0xAF,0x16,0xB9,0x22,0xE5,0x96,0xC9,0x6E,0x7A,0x32,0xDF,0x2D,0x2C,0x32,0xCE,0xCE,0x77,0x35,0xDB,0xD4,0x9B,0xE4,0xE5,0xBA,0xB6,0xEC,0xA8,0x80,0xEF,0x45,0x34,0x60,0x01,0x03,0xFC,0x28,0x6A,0x80,0x1F,0x4D,0x15,0xF0,0x15,0x99,0x04,0x38,0x00,0x0F,0x00,0x00};
const uint8_t spYOU[] PROGMEM ={0xA5,0xDA,0x0D,0x98,0x23,0x6F,0xF4,0x6A,0x55,0x33,0xA9,0x82,0xC6,0xEB,0x91,0xF5,0x68,0x02,0x11,0x5B,0x67,0x36,0x32,0x2B,0xA2,0x24,0x75,0x75,0xCF,0x7B,0xD5,0x9B,0xD6,0x5A,0x61,0xE5,0x49,0xDD,0x6A,0x97,0xFB,0xD8,0xFB,0x5E,0x77,0xA2,0xB3,0x2C,0x45,0x25,0x8D,0x3C,0x00,0x00};
const uint8_t spSELECT[] PROGMEM = {0x0C,0x78,0xC6,0x95,0x01,0x3F,0xA5,0x28,0xE0,0xB7,0x52,0x0B,0x04,0xE0,0xB7,0x54,0x07,0xFC,0x52,0x66,0x80,0x9F,0xCB,0x46,0xB7,0x44,0xAA,0xA9,0xE4,0x59,0x5D,0x53,0x15,0x6C,0xBA,0x65,0xF5,0x85,0x55,0xB8,0xF3,0xE6,0x35,0x2C,0xA8,0x6B,0xAC,0xC9,0xD6,0xB0,0x90,0xAE,0xB1,0xA5,0x5D,0x5D,0xE5,0x9B,0x1A,0xF6,0x7A,0xB5,0x55,0x8E,0x5B,0xF8,0xE6,0xD5,0x36,0x37,0x9C,0x9A,0xAB,0x46,0xD3,0x63,0x62,0x71,0x4C,0x44,0xE0,0x14,0xA5,0x2A,0x54,0x03,0x00,0x40,0x01,0x43,0xBA,0x09,0x60,0x73,0x35,0x04,0x4E,0x51,0xAA,0x42,0x35,0xFE,0x1F};
const uint8_t spLEVEL[] PROGMEM = {0x69,0xAB,0xC4,0xB3,0xD8,0x92,0x86,0x2D,0x83,0xEE,0x60,0xCD,0x12,0xD6,0x0C,0x66,0x45,0x2C,0x73,0x58,0x0B,0xA8,0x53,0xD6,0xAC,0x6D,0xE9,0xC0,0x57,0xC5,0xB2,0xAE,0xA1,0xB0,0x49,0x0D,0x7B,0xBD,0x86,0xA2,0x47,0x35,0xE3,0xF5,0xEA,0xB2,0x4B,0x4B,0xCB,0xC7,0xA3,0xCD,0xDE,0x23,0x59,0x1A,0x9A,0x31,0x8B,0xB0,0x54,0x76,0xE3,0xC6,0x26,0x5C,0x2C,0xCC,0x76,0x6B,0x92,0xBC,0x34,0x95,0xC6,0xA3,0xCE,0x74,0xDB,0x85,0x3B,0x8F,0xBA,0x90,0x9C,0x51,0xCC,0xD6,0xEA,0x4C,0x63,0x56,0x30,0x6D,0xA9,0x23,0xCF,0x59,0xD0,0x34,0xB5,0xF9,0x7F};
// SD card

//Touch Sensor
int TS1=2;
int TS2=17;
int TS3=18;
int TS4=19;

//Timer
unsigned long hardMode = 300;
unsigned long easyMode = 700;
unsigned long timeOfPrompt;
unsigned long timeElapsed;
long action;

// variable to control game loop
int playing = 0;
int actionCompleted = 0;
int score = 0;
int finalScore;
  
//setup
void setup() 
{
  pinMode(btnBlue, INPUT);
  pinMode(btnRed, INPUT);
  pinMode(btnYellow, INPUT);
  pinMode(btnGreen, INPUT);
  SdPlay.setSDCSPin(4); // sd card cs pin
  Serial.begin(9600);
  lcd.begin(16, 2);
  lcd.backlight();
  welcome();
  delay(300);
}

void loop() 
{
  pressAnyButton();
}

//Welcome message
void welcome()
{
  lcd.setCursor(0, 0);         // move cursor to   (0, 0)
  lcd.print("Welcome to");        // print message at (0, 0)
  lcd.setCursor(5, 1);         // move cursor to   (5, 1)
  lcd.print("BOP-IT PRO!"); // print message at (5, 1)

  //voz.say(spWELCOME)
  //voz.say(spTO)

}
//Start Message
void start()
{
  lcd.setCursor(0, 0);
  lcd.print("Press & hold any");
  lcd.setCursor(0, 1);
  lcd.print("button to start");
  delay(50);
}
//Button Function
void pressAnyButton()
{
  blueState = digitalRead(btnBlue);
  redState = digitalRead(btnRed);
  yellowState = digitalRead(btnYellow);
  greenState = digitalRead(btnGreen);
      //blue                    red                   yellow            green
  if(blueState == HIGH || redState == HIGH || yellowState == HIGH || greenState == HIGH)
  {
    gameMode(); //Displays difficulty level
    if(redState == HIGH)
    {
      hardGameStart();
      delay(200);      
    }
    else if(greenState == HIGH)
    {
      easyGameStart();
      delay(200);   
    }
  }   
  else
  {
    start();
    delay(50);
    lcd.noDisplay();
    delay(50);
    lcd.display();
  }
}

void gameMode()
{
  redState = digitalRead(btnRed);
  greenState = digitalRead(btnGreen);
    lcdDisplay();
    lcd.print("DIFFICULTY ");
    lcd.setCursor(11, 1);
    lcd.print("LEVEL");
    delay(100);
    lcdDisplay();
    lcd.print("GREEN FOR EASY");
    lcd.setCursor(0, 1);
    lcd.print("RED FOR HARD");
    delay(200);
}    

//Game mode hard, timer = 3 secs
void hardGameStart()
{
    lcdDisplay();
    lcd.print("  YOU SELECTED  ");
    lcd.setCursor(0, 1);
    lcd.print("   HARD LEVEL   ");
    voz.say(spYOU);
    voz.say(spSELECT);
    voz.say(spLEVEL);
    delay(100);
    //keepPlayingHard();
}
void easyGameStart()
{
    lcdDisplay();
    lcd.print("  YOU SELECTED  ");
    lcd.setCursor(0, 1);
    lcd.print("   EASY LEVEL   ");
    voz.say(spYOU);
    voz.say(spSELECT);
    delay(100);
    keepPlayingEasy();
}
void lcdDisplay()
{
  lcd.clear();
  lcd.setCursor(0, 0);
}
void gameOver()
{
  tone(6, 100, 100);
  delay(100);
  noTone(6);
  finalScore = score;
  char scoreString[10];
  sprintf(scoreString,"%d",finalScore);
  lcdDisplay();
  lcd.print("GAME OVER!");
  delay(100);
  lcdDisplay();
  lcd.print("SCORE: ");
  lcd.setCursor(7, 0);                    
  lcd.print(scoreString);
  delay(500);
  start();
}
void keepPlayingEasy()
{
  int playing = 1;
  //while loop to keep running game until user has failed and "playing" is set to zero
  while (playing != 0) 
  {   
    //pick an action to assign the user via a random number generator â€“ upper bound is exclusive
    action = random(1, 4);
    actionCompleted = 0;
    if (action == 1)
    {
      lcdDisplay();
      lcd.print("PRESS RED");
      voz.say(spPRESS);
      voz.say(spRED);
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 1 = Press Red Button  
      while (timeElapsed < easyMode && actionCompleted == 0)
      {
        redState = digitalRead(btnRed);
        blueState = digitalRead(btnBlue);
        yellowState = digitalRead(btnYellow);
        greenState = digitalRead(btnGreen);
        //read switch for comparing to check if action was completed
        //if the switch state changed, then the user completed action
        if (redState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(greenState == HIGH || blueState == HIGH || yellowState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeElapsed > 700 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
      }

    }
    //Action 2
    else if (action == 2)
    {
      lcdDisplay();
      lcd.print("PRESS GREEN");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 1 = Press Red Button  
      while (timeElapsed < easyMode && actionCompleted == 0)
      {
        redState = digitalRead(btnRed);
        blueState = digitalRead(btnBlue);
        yellowState = digitalRead(btnYellow);
        greenState = digitalRead(btnGreen);
        //read switch for comparing to check if action was completed
        //if the switch state changed, then the user completed action
        if (greenState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(redState == HIGH || blueState == HIGH || yellowState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeElapsed > 700 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
      }
    }

    //Action 3
    else if (action == 3)
    {
      lcdDisplay();
      lcd.print("PRESS BLUE");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 3 = Press BLUE Button  
      while (timeElapsed < easyMode && actionCompleted == 0)
      {
        redState = digitalRead(btnRed);
        blueState = digitalRead(btnBlue);
        yellowState = digitalRead(btnYellow);
        greenState = digitalRead(btnGreen);
        //read switch for comparing to check if action was completed
        //if the switch state changed, then the user completed action
        if (blueState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(redState == HIGH || greenState == HIGH || yellowState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
         
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeElapsed > 700 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
       
      }
    }

    //Action 4
    else if (action == 4)
    {
      lcdDisplay();
      lcd.print("PRESS YELLOW");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 3 = Press BLUE Button  
      while (timeElapsed < easyMode && actionCompleted == 0)
      {
        redState = digitalRead(btnRed);
        blueState = digitalRead(btnBlue);
        yellowState = digitalRead(btnYellow);
        greenState = digitalRead(btnGreen);
        //read switch for comparing to check if action was completed
        //if the switch state changed, then the user completed action
        if (yellowState == HIGH)
        {
          actionCompleted = 1;
          score = score + 1;
        }
        else if(redState == HIGH || greenState == HIGH || blueState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
          
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeElapsed > 700 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
       
      }
    }
  }
}//end this function
/*
void keepPlayingHard()
{
  int playing = 1;
  //while loop to keep running game until user has failed and "playing" is set to zero
  while (playing != 0) 
  {   
    //pick an action to assign the user via a random number generator â€“ upper bound is exclusive
    action = random(1, 4);
    actionCompleted = 0;
    if (action == 1)
    {
      lcdDisplay();
      lcd.print("PRESS RED");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 1 = Press Red Button  
      while (timeElapsed < hardMode && actionCompleted == 0)
      {
        //read switch for comparing to check if action was completed
        redState = digitalRead(btnRed);
        int blueState = digitalRead(btnBlue);
        int yellowState = digitalRead(btnYellow);
        int greenState = digitalRead(btnGreen);
        //if the switch state changed, then the user completed action
        if (redState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(greenState == HIGH || blueState == HIGH || yellowState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
          loop();
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeOfPrompt == 300 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
        loop();
      }

    }
  }
}//end this function
*/
