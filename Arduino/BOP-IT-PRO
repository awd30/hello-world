
//LCD config
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <pitches.h>
LiquidCrystal_I2C lcd(0x27,16,2); 

//Buttons define
const int btnBlue=2; //Blue
const int btnRed=3; //Red
const int btnYellow=4; //Yellow
const int btnGreen=5; //Green

int blueState = 0;
int redState = 0;
int yellowState = 0;
int greenState = 0;

//Speaker


//Touch Sensor
int TS1=2;
int TS2=17;
int TS3=18;
int TS4=19;

//Timer
unsigned long hardMode = 300;
unsigned long easyMode = 700;
unsigned long timeOfPrompt;
unsigned long timeElapsed;
long action;
// variable to control game loop
int playing = 0;
int actionCompleted = 0;
int score = 0;
int finalScore;
  
//setup
void setup() 
{
  pinMode(btnBlue, INPUT);
  pinMode(btnRed, INPUT);
  pinMode(btnYellow, INPUT);
  pinMode(btnGreen, INPUT);
  Serial.begin(9600);
  lcd.begin(16, 2);
  lcd.backlight();
  welcome();
  delay(300);
}

void loop() 
{
  pressAnyButton();
}

//Welcome message
void welcome()
{
  lcd.setCursor(0, 0);         // move cursor to   (0, 0)
  lcd.print("Welcome to");        // print message at (0, 0)
  lcd.setCursor(5, 1);         // move cursor to   (5, 1)
  lcd.print("BOP-IT PRO!"); // print message at (5, 1)
}
//Start Message
void start()
{
  lcd.setCursor(0, 0);
  lcd.print("Press & hold any");
  lcd.setCursor(0, 1);
  lcd.print("button to start");
  delay(50);
}
//Button Function
void pressAnyButton()
{
  blueState = digitalRead(btnBlue);
  redState = digitalRead(btnRed);
  yellowState = digitalRead(btnYellow);
  greenState = digitalRead(btnGreen);
      //blue                    red                   yellow            green
  if(blueState == HIGH || redState == HIGH || yellowState == HIGH || greenState == HIGH)
  {
    gameMode(); //Displays difficulty level
    if(redState == HIGH)
    {
      hardGameStart();
      delay(200);      
    }
    else if(greenState == HIGH)
    {
      easyGameStart();
      delay(200);   
    }
  }   
  else
  {
    start();
    delay(50);
    lcd.noDisplay();
    delay(50);
    lcd.display();
  }
}

void gameMode()
{
  redState = digitalRead(btnRed);
  greenState = digitalRead(btnGreen);
    lcdDisplay();
    lcd.print("DIFFICULTY ");
    lcd.setCursor(11, 1);
    lcd.print("LEVEL");
    delay(100);
    lcdDisplay();
    lcd.print("GREEN FOR EASY");
    lcd.setCursor(0, 1);
    lcd.print("RED FOR HARD");
    delay(200);
}    

//Game mode hard, timer = 3 secs
void hardGameStart()
{
    lcdDisplay();
    lcd.print("  YOU SELECTED  ");
    lcd.setCursor(0, 1);
    lcd.print("   HARD LEVEL   ");
    delay(100);
    //keepPlayingHard();
}
void easyGameStart()
{
    lcdDisplay();
    lcd.print("  YOU SELECTED  ");
    lcd.setCursor(0, 1);
    lcd.print("   EASY LEVEL   ");
    delay(100);
    keepPlayingEasy();
}
void lcdDisplay()
{
  lcd.clear();
  lcd.setCursor(0, 0);
}
void gameOver()
{
  tone(6, 100, 100);
  delay(100);
  noTone(6);
  finalScore = score;
  char scoreString[10];
  sprintf(scoreString,"%d",finalScore);
  lcdDisplay();
  lcd.print("GAME OVER!");
  delay(100);
  lcdDisplay();
  lcd.print("SCORE: ");
  lcd.setCursor(7, 0);                    
  lcd.print(scoreString);
  delay(500);
  start();
}
void keepPlayingEasy()
{
  int playing = 1;
  //while loop to keep running game until user has failed and "playing" is set to zero
  while (playing != 0) 
  {   
    //pick an action to assign the user via a random number generator – upper bound is exclusive
    action = random(1, 4);
    actionCompleted = 0;
    if (action == 1)
    {
      lcdDisplay();
      lcd.print("PRESS RED");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 1 = Press Red Button  
      while (timeElapsed < easyMode && actionCompleted == 0)
      {
        redState = digitalRead(btnRed);
        blueState = digitalRead(btnBlue);
        yellowState = digitalRead(btnYellow);
        greenState = digitalRead(btnGreen);
        //read switch for comparing to check if action was completed
        //if the switch state changed, then the user completed action
        if (redState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(greenState == HIGH || blueState == HIGH || yellowState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeElapsed > 700 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
      }

    }
    //Action 2
    else if (action == 2)
    {
      lcdDisplay();
      lcd.print("PRESS GREEN");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 1 = Press Red Button  
      while (timeElapsed < easyMode && actionCompleted == 0)
      {
        redState = digitalRead(btnRed);
        blueState = digitalRead(btnBlue);
        yellowState = digitalRead(btnYellow);
        greenState = digitalRead(btnGreen);
        //read switch for comparing to check if action was completed
        //if the switch state changed, then the user completed action
        if (greenState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(redState == HIGH || blueState == HIGH || yellowState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeElapsed > 700 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
      }
    }

    //Action 3
    else if (action == 3)
    {
      lcdDisplay();
      lcd.print("PRESS BLUE");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 3 = Press BLUE Button  
      while (timeElapsed < easyMode && actionCompleted == 0)
      {
        redState = digitalRead(btnRed);
        blueState = digitalRead(btnBlue);
        yellowState = digitalRead(btnYellow);
        greenState = digitalRead(btnGreen);
        //read switch for comparing to check if action was completed
        //if the switch state changed, then the user completed action
        if (blueState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(redState == HIGH || greenState == HIGH || yellowState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
         
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeElapsed > 700 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
       
      }
    }

    //Action 4
    else if (action == 4)
    {
      lcdDisplay();
      lcd.print("PRESS YELLOW");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 3 = Press BLUE Button  
      while (timeElapsed < easyMode && actionCompleted == 0)
      {
        redState = digitalRead(btnRed);
        blueState = digitalRead(btnBlue);
        yellowState = digitalRead(btnYellow);
        greenState = digitalRead(btnGreen);
        //read switch for comparing to check if action was completed
        //if the switch state changed, then the user completed action
        if (yellowState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(redState == HIGH || greenState == HIGH || blueState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
          
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeElapsed > 700 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
       
      }
    }
  }
}//end this function
/*
void keepPlayingHard()
{
  int playing = 1;
  //while loop to keep running game until user has failed and "playing" is set to zero
  while (playing != 0) 
  {   
    //pick an action to assign the user via a random number generator – upper bound is exclusive
    action = random(1, 4);
    actionCompleted = 0;
    if (action == 1)
    {
      lcdDisplay();
      lcd.print("PRESS RED");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      //Action 1 = Press Red Button  
      while (timeElapsed < hardMode && actionCompleted == 0)
      {
        //read switch for comparing to check if action was completed
        redState = digitalRead(btnRed);
        int blueState = digitalRead(btnBlue);
        int yellowState = digitalRead(btnYellow);
        int greenState = digitalRead(btnGreen);
        //if the switch state changed, then the user completed action
        if (redState == HIGH)
        {
          actionCompleted = 1;
          score = score +1;
        }
        else if(greenState == HIGH || blueState == HIGH || yellowState == HIGH)
        {
          gameOver();
          playing = 0;
          score = 0;
          loop();
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (actionCompleted == 1)
      {
        tone(6, 5000, 50); //tone(pin, freq, duration)
        delay(50);
        noTone(6);
      }
      else if(timeOfPrompt == 300 && actionCompleted == 0)
      {
        gameOver();
        playing = 0;
        score = 0;
        loop();
      }

    }
  }
}//end this function
*/
