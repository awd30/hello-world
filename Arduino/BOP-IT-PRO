#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27,16,2);

// Buttons definitions
const int btnBlue = 2;
const int btnRed = 3;
const int btnYellow = 4;
const int btnGreen = 5;

// Initial states of buttons
int blueState = 0, redState = 0, yellowState = 0, greenState = 0;

//POT
int potPin = A1;
int potValue = 0;
int currPotValue = 0;
int diff = 0;

//Touch Sensor
const int TSR = 10;
const int TSL = 7;
const int TSU = 9;

// Initial states of touch sensors
int rightTouch, leftTouch, upTouch;

//Timer
unsigned long hardMode = 300;
unsigned long easyMode = 400;
unsigned long timeOfPrompt, timeElapsed;
int timer;
long action;

// Variables to control game loop, initialized to 0
int playing1 = 0;
int actionCompleted = 0;
int score = 0;
int finalScore = 0;
  
//setup
void setup() 
{
  pinMode(btnBlue, INPUT);
  pinMode(btnRed, INPUT);
  pinMode(btnYellow, INPUT);
  pinMode(btnGreen, INPUT);
  pinMode(TSR, INPUT);
  pinMode(TSL, INPUT);
  pinMode(TSU, INPUT); //Uptouch
  pinMode(potPin, INPUT); //pot
  
  Serial.begin(9600);
  lcd.begin(16, 2);
  lcd.backlight();
  welcome();
  delay(300);
}

void loop() 
{
  pressAnyButton();
}

//Welcome message
void welcome()
{
  lcd.setCursor(0, 0);         // move cursor to (0, 0)
  lcd.print("Welcome to");     // print message at (0, 0)
  lcd.setCursor(5, 1);         // move cursor to (5, 1)
  lcd.print("BOP-IT PRO!");    // print message at (5, 1)
}

//Start Message
void start()
{
  lcd.setCursor(0, 0);
  lcd.print("Press & hold any");
  lcd.setCursor(0, 1);
  lcd.print("button to start");
  delay(50);
}

// Update button state global variables with current values
void readBtnStates()
{
  blueState = digitalRead(btnBlue);
  redState = digitalRead(btnRed);
  yellowState = digitalRead(btnYellow);
  greenState = digitalRead(btnGreen);
  currPotValue = analogRead(potPin);  
}
void rightSound()
{
  tone(6, 6000, 20); //tone(pin, freq, duration)
  delay(50);
  noTone(6);
}
void gameOverSound()
{
  tone(6, 4000, 100);
  delay(50);
  noTone(6);

  tone(6, 2000, 100);
  delay(50);
  noTone(6);
}

int leftTouch2, rightTouch2, upTouch2;
void getTouch2States() {
  leftTouch2 = digitalRead(TSL);
  rightTouch2 = digitalRead(TSR);
  upTouch2 = digitalRead(TSU);
}

//Button Function
void pressAnyButton()
{
  start();
  readBtnStates();
      //blue                    red                   yellow            green
  if((redState == HIGH) || (blueState == HIGH) || (yellowState == HIGH) || (greenState == HIGH))
  {
    gameMode(); //Displays difficulty level
    bool level = 0;
    while (level != 1) {
      readBtnStates();
      if(getBtnState(btnRed))//(redState == HIGH)
      {
        level = 1;
        hardGameStart();
        delay(200);      
      }
      else if(getBtnState(btnGreen))
      {
        level = 1;
        easyGameStart();
        delay(200);   
      }
    }
  }
}

void gameMode()
{
  lcdDisplay();
  lcd.print("DIFFICULTY ");
  lcd.setCursor(11, 1);
  lcd.print("LEVEL");
  delay(100);

  lcdDisplay();
  lcd.print("GREEN FOR EASY");
  lcd.setCursor(0, 1);
  lcd.print("RED FOR HARD");
  delay(200);
}    

// Game mode hard, timer = 3 secs
void hardGameStart()
{
    lcdDisplay();
    lcd.print("  YOU SELECTED  ");
    lcd.setCursor(0, 1);
    lcd.print("   HARD LEVEL   ");
    delay(100);
    keepPlaying(hardMode);
}
void easyGameStart()
{
    lcdDisplay();
    lcd.print("  YOU SELECTED  ");
    lcd.setCursor(0, 1);
    lcd.print("   EASY LEVEL   ");
    delay(100);
    keepPlaying(easyMode);
}
void lcdDisplay()
{
  lcd.clear();
  lcd.setCursor(0, 0);
}

int getBtnState(int pin) 
{
  switch(pin) {
    case 2:
      return blueState;
      break;
    case 3:
      return redState;
      break;
    case 4:
      return yellowState;
      break;
    case 5:
      return greenState;
      break;
    default:
      return 0;
      break;
  }
}

void recalcTime()
{
  //recalculate timeElapsed
  timeElapsed = millis() - timeOfPrompt;
  int time = (timeElapsed - timeOfPrompt)/1000;
  lcd.setCursor(0, 1);
  char string[1];
  sprintf(string,"%d",time);
  lcd.print(time);
}

void gameOver()
{
  playing1 = 0;
  gameOverSound(); 
  
  lcdDisplay();
  lcd.print("GAME OVER!");
  delay(100);

  finalScore = score;
  char scoreString[10];
  sprintf(scoreString,"%d",finalScore);
  lcdDisplay();
  lcd.print("SCORE: ");
  lcd.setCursor(7, 0);                    
  lcd.print(scoreString);
  delay(300);
  
  score = 0;
  start();
}

int wrongBtn = 0;

void keepPlaying(unsigned long t)
{
  playing1 = 1;
  //while loop to keep running game until user has failed and "playing1" is set to zero
  while (playing1 != 0) 
  {   
    //pick an action to assign the user via a random number generator â€“ upper bound is exclusive
    action = random(1, 9);
    actionCompleted = 0;
    //upTouch, leftTouch, rightTouch = 0;
    diff = 0;

    lcdDisplay();
    // Action 1 --> press red button
    if (action == 1)
    {
      lcd.print("PRESS RED");
      timeOfPrompt = millis(); //time displayed
      timeElapsed = millis() - timeOfPrompt;

      while (timeElapsed < t && actionCompleted == 0)
      {
        readBtnStates();
        if (redState == HIGH)
        {
          actionCompleted = 1;
          score = score + 1;
          rightSound();
        }
        else if(greenState == HIGH || blueState == HIGH || yellowState == HIGH)
        {
          wrongBtn = 1;
          break;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }

      if (wrongBtn == 1)
      {
        gameOver();
      }
      else if(actionCompleted == 0)
      {
        gameOver();
      }
    }
    
    // Action 2 --> press green button
    else if (action == 2)
    {
      lcd.print("PRESS GREEN"); 
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
  
      while (timeElapsed < t && actionCompleted == 0)
      {
        readBtnStates();
        if (greenState == HIGH)
        {
          actionCompleted = 1;
          score = score + 1;
          delay(5);
          rightSound();
        }
        else if(redState == HIGH || blueState == HIGH || yellowState == HIGH)
        {
          wrongBtn = 1;
          break;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }

      if (wrongBtn == 1)
      {
        gameOver();
      }
      else if(actionCompleted == 0)
      {
        gameOver();
      }
    }

    // Action 3 --> press blue button
    else if (action == 3)
    {
      lcd.print("PRESS BLUE");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
 
      while (timeElapsed < t && actionCompleted == 0)
      {
        readBtnStates();
        if (blueState == HIGH)
        {
          actionCompleted = 1;
          score = score + 1;
          rightSound();
        }
        else if(redState == HIGH || greenState == HIGH || yellowState == HIGH)
        {
          wrongBtn = 1;
          break;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }

      if (wrongBtn == 1)
      {
        gameOver();
      }
      else if(actionCompleted == 0)
      {
        gameOver();
      }
    }

    // Action 4 --> press yellow button
    else if (action == 4)
    {
      lcd.print("PRESS YELLOW");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
 
      while (timeElapsed < t && actionCompleted == 0)
      {
        readBtnStates();
        if (yellowState == HIGH)
        {
          actionCompleted = 1;
          score = score + 1;
          rightSound();
        }
        else if(redState == HIGH || greenState == HIGH || blueState == HIGH)
        {
          wrongBtn = 1;
          break;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }

      if (wrongBtn == 1)
      {
        gameOver();
      }
      else if(actionCompleted == 0)
      {
        gameOver();
      }
    }

    // Action 5 --> touch right sensor    
    else if (action == 5)
    {
      lcd.print("TOUCH RIGHT ");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;

      rightTouch = digitalRead(TSR);
      while (timeElapsed < t && actionCompleted == 0)
      {
        readBtnStates();
        getTouch2States();
        if (rightTouch != rightTouch2)
        {
          actionCompleted = 1;
          score = score + 1;
          rightSound();
        }
        else if(greenState == HIGH || blueState == HIGH || yellowState == HIGH || redState == HIGH)
        {
          wrongBtn = 1;
          break;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }

      if (wrongBtn == 1)
      {
        gameOver();
      }
      else if(actionCompleted == 0)
      {
        gameOver();
      }
    }

    // Action 6 --> touch left sensor
    else if (action == 6)
    {
      lcd.print("TOUCH LEFT ");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;

      leftTouch = digitalRead(TSL);
      while (actionCompleted == 0)
      {
        readBtnStates();
        getTouch2States();
        if (leftTouch != leftTouch2)
        {
          actionCompleted = 1;
          score = score + 1;
          rightSound();
        }
        else if(((greenState == HIGH) || (blueState == HIGH) || (yellowState == HIGH) || (redState == HIGH)))
        {
          wrongBtn = 1;
          break;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (wrongBtn == 1)
      {
        gameOver();
      }
      else if(actionCompleted == 0)
      {
        gameOver();
      }
    }

    // Action 7 --> touch top sensor
    else if (action == 7)
    {
      lcd.print("TOUCH UP ");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;

      upTouch = digitalRead(TSU);
      while (timeElapsed < t && actionCompleted == 0)
      {
        readBtnStates();
        getTouch2States();
        if (upTouch != upTouch2)
        {
          actionCompleted = 1;
          score = score + 1;
          rightSound();
        }
        else if(((greenState == HIGH) || (blueState == HIGH) || (yellowState == HIGH) || (redState == HIGH)))
        {
          wrongBtn = 1;
          break;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (wrongBtn == 1)
      {
        gameOver();
      }
      else if(actionCompleted == 0)
      {
        gameOver();
      }
    }

    // Action 8 --> slide potentiometer to the side
    else if (action == 8)
    {
      lcd.print("SLIDE");
      timeOfPrompt = millis();
      timeElapsed = millis() - timeOfPrompt;
      potValue = analogRead(potPin);

      while (timeElapsed < t && actionCompleted == 0)
      {
        readBtnStates();
        diff = abs(potValue - currPotValue);
        diff = 600;
        delay(100);
        if (diff >= 500)
        {
          actionCompleted = 1;
          score = score + 1;
          rightSound();
        }
        else if(((greenState == HIGH) || (blueState == HIGH) || (yellowState == HIGH) || (redState == HIGH)))
        {
          wrongBtn = 1;
          break;
        }
        //recalculate timeElapsed
        timeElapsed = millis() - timeOfPrompt;
      }
      if (wrongBtn == 1)
      {
        gameOver();
      }
      else if(actionCompleted == 0)
      {
        gameOver();
      }
    }
  }
  //gameOver();
}//end this function
